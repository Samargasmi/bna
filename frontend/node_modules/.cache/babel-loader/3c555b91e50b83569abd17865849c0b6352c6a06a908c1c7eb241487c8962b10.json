{"ast":null,"code":"import api from './authService.ts';\nexport const adminService = {\n  async getDashboardStats() {\n    const response = await api.get('/admin/dashboard/stats');\n    return response.data;\n  },\n  async getTransactionAnalytics(period) {\n    const response = await api.get('/admin/analytics/transactions', {\n      params: {\n        period\n      }\n    });\n    return response.data;\n  },\n  async getUserAnalytics() {\n    const response = await api.get('/admin/analytics/users');\n    return response.data;\n  },\n  async getAccountAnalytics() {\n    const response = await api.get('/admin/analytics/accounts');\n    return response.data;\n  },\n  async getAllUsers(filters) {\n    const response = await api.get('/admin/users', {\n      params: filters\n    });\n    return response.data;\n  },\n  async getUserById(userId) {\n    const response = await api.get(`/admin/users/${userId}`);\n    return response.data;\n  },\n  async createUser(userData) {\n    const response = await api.post('/admin/users', userData);\n    return response.data;\n  },\n  async updateUser(userId, userData) {\n    const response = await api.put(`/admin/users/${userId}`, userData);\n    return response.data;\n  },\n  async updateUserStatus(userId, status) {\n    const response = await api.put(`/admin/users/${userId}/status`, {\n      status\n    });\n    return response.data;\n  },\n  async deleteUser(userId) {\n    const response = await api.delete(`/admin/users/${userId}`);\n    return response.data;\n  },\n  async getAllAccounts(filters) {\n    const response = await api.get('/admin/accounts', {\n      params: filters\n    });\n    return response.data;\n  },\n  async getAllTransactions(filters) {\n    const response = await api.get('/admin/transactions', {\n      params: filters\n    });\n    return response.data;\n  }\n};","map":{"version":3,"names":["api","adminService","getDashboardStats","response","get","data","getTransactionAnalytics","period","params","getUserAnalytics","getAccountAnalytics","getAllUsers","filters","getUserById","userId","createUser","userData","post","updateUser","put","updateUserStatus","status","deleteUser","delete","getAllAccounts","getAllTransactions"],"sources":["C:/Users/khali/OneDrive/Bureau/bna/frontend/src/services/adminService.ts"],"sourcesContent":["import api from './authService.ts';\r\n\r\nexport const adminService = {\r\n  async getDashboardStats() {\r\n    const response = await api.get('/admin/dashboard/stats');\r\n    return response.data;\r\n  },\r\n\r\n  async getTransactionAnalytics(period?: string) {\r\n    const response = await api.get('/admin/analytics/transactions', {\r\n      params: { period },\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  async getUserAnalytics() {\r\n    const response = await api.get('/admin/analytics/users');\r\n    return response.data;\r\n  },\r\n\r\n  async getAccountAnalytics() {\r\n    const response = await api.get('/admin/analytics/accounts');\r\n    return response.data;\r\n  },\r\n\r\n  async getAllUsers(filters?: any) {\r\n    const response = await api.get('/admin/users', { params: filters });\r\n    return response.data;\r\n  },\r\n\r\n  async getUserById(userId: string) {\r\n    const response = await api.get(`/admin/users/${userId}`);\r\n    return response.data;\r\n  },\r\n\r\n  async createUser(userData: any) {\r\n    const response = await api.post('/admin/users', userData);\r\n    return response.data;\r\n  },\r\n\r\n  async updateUser(userId: string, userData: any) {\r\n    const response = await api.put(`/admin/users/${userId}`, userData);\r\n    return response.data;\r\n  },\r\n\r\n  async updateUserStatus(userId: string, status: string) {\r\n    const response = await api.put(`/admin/users/${userId}/status`, { status });\r\n    return response.data;\r\n  },\r\n\r\n  async deleteUser(userId: string) {\r\n    const response = await api.delete(`/admin/users/${userId}`);\r\n    return response.data;\r\n  },\r\n\r\n  async getAllAccounts(filters?: any) {\r\n    const response = await api.get('/admin/accounts', { params: filters });\r\n    return response.data;\r\n  },\r\n\r\n  async getAllTransactions(filters?: any) {\r\n    const response = await api.get('/admin/transactions', { params: filters });\r\n    return response.data;\r\n  },\r\n};\r\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,kBAAkB;AAElC,OAAO,MAAMC,YAAY,GAAG;EAC1B,MAAMC,iBAAiBA,CAAA,EAAG;IACxB,MAAMC,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAC,wBAAwB,CAAC;IACxD,OAAOD,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED,MAAMC,uBAAuBA,CAACC,MAAe,EAAE;IAC7C,MAAMJ,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAC,+BAA+B,EAAE;MAC9DI,MAAM,EAAE;QAAED;MAAO;IACnB,CAAC,CAAC;IACF,OAAOJ,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED,MAAMI,gBAAgBA,CAAA,EAAG;IACvB,MAAMN,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAC,wBAAwB,CAAC;IACxD,OAAOD,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED,MAAMK,mBAAmBA,CAAA,EAAG;IAC1B,MAAMP,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAC,2BAA2B,CAAC;IAC3D,OAAOD,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED,MAAMM,WAAWA,CAACC,OAAa,EAAE;IAC/B,MAAMT,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAC,cAAc,EAAE;MAAEI,MAAM,EAAEI;IAAQ,CAAC,CAAC;IACnE,OAAOT,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED,MAAMQ,WAAWA,CAACC,MAAc,EAAE;IAChC,MAAMX,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAC,gBAAgBU,MAAM,EAAE,CAAC;IACxD,OAAOX,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED,MAAMU,UAAUA,CAACC,QAAa,EAAE;IAC9B,MAAMb,QAAQ,GAAG,MAAMH,GAAG,CAACiB,IAAI,CAAC,cAAc,EAAED,QAAQ,CAAC;IACzD,OAAOb,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED,MAAMa,UAAUA,CAACJ,MAAc,EAAEE,QAAa,EAAE;IAC9C,MAAMb,QAAQ,GAAG,MAAMH,GAAG,CAACmB,GAAG,CAAC,gBAAgBL,MAAM,EAAE,EAAEE,QAAQ,CAAC;IAClE,OAAOb,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED,MAAMe,gBAAgBA,CAACN,MAAc,EAAEO,MAAc,EAAE;IACrD,MAAMlB,QAAQ,GAAG,MAAMH,GAAG,CAACmB,GAAG,CAAC,gBAAgBL,MAAM,SAAS,EAAE;MAAEO;IAAO,CAAC,CAAC;IAC3E,OAAOlB,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED,MAAMiB,UAAUA,CAACR,MAAc,EAAE;IAC/B,MAAMX,QAAQ,GAAG,MAAMH,GAAG,CAACuB,MAAM,CAAC,gBAAgBT,MAAM,EAAE,CAAC;IAC3D,OAAOX,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED,MAAMmB,cAAcA,CAACZ,OAAa,EAAE;IAClC,MAAMT,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAC,iBAAiB,EAAE;MAAEI,MAAM,EAAEI;IAAQ,CAAC,CAAC;IACtE,OAAOT,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED,MAAMoB,kBAAkBA,CAACb,OAAa,EAAE;IACtC,MAAMT,QAAQ,GAAG,MAAMH,GAAG,CAACI,GAAG,CAAC,qBAAqB,EAAE;MAAEI,MAAM,EAAEI;IAAQ,CAAC,CAAC;IAC1E,OAAOT,QAAQ,CAACE,IAAI;EACtB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}