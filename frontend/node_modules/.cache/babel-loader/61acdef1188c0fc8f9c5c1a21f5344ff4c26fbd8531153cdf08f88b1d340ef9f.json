{"ast":null,"code":"// Mock data for admin service\nconst mockUsers = [{\n  id: 'client-1',\n  email: 'ahmed.hassan@email.com',\n  firstName: 'Ahmed',\n  lastName: 'Hassan',\n  phoneNumber: '+1234567891',\n  address: '123 Main St, Casablanca, Morocco',\n  dateOfBirth: '1990-01-15',\n  nationalId: 'CLIENT001',\n  role: 'client',\n  status: 'active',\n  isEmailVerified: true,\n  createdAt: '2024-01-01T00:00:00Z',\n  updatedAt: '2024-01-01T00:00:00Z'\n}, {\n  id: 'client-2',\n  email: 'samar.ali@email.com',\n  firstName: 'Samar',\n  lastName: 'Ali',\n  phoneNumber: '+1234567892',\n  address: '456 Oak Ave, Rabat, Morocco',\n  dateOfBirth: '1985-05-20',\n  nationalId: 'CLIENT002',\n  role: 'client',\n  status: 'active',\n  isEmailVerified: true,\n  createdAt: '2024-01-02T00:00:00Z',\n  updatedAt: '2024-01-02T00:00:00Z'\n}];\nconst mockAccounts = [{\n  id: 'account-1',\n  accountNumber: 'BNA1234567890',\n  type: 'savings',\n  status: 'active',\n  balance: 5000.00,\n  availableBalance: 5000.00,\n  interestRate: 2.5,\n  currency: 'USD',\n  description: 'Primary Savings Account',\n  userId: 'client-1',\n  createdAt: '2024-01-01T00:00:00Z',\n  updatedAt: '2024-01-01T00:00:00Z',\n  user: mockUsers[0]\n}, {\n  id: 'account-2',\n  accountNumber: 'BNA1234567891',\n  type: 'checking',\n  status: 'active',\n  balance: 2500.00,\n  availableBalance: 2500.00,\n  interestRate: 0.5,\n  currency: 'USD',\n  description: 'Checking Account',\n  userId: 'client-1',\n  createdAt: '2024-01-01T00:00:00Z',\n  updatedAt: '2024-01-01T00:00:00Z',\n  user: mockUsers[0]\n}, {\n  id: 'account-3',\n  accountNumber: 'BNA1234567892',\n  type: 'business',\n  status: 'active',\n  balance: 15000.00,\n  availableBalance: 15000.00,\n  interestRate: 1.5,\n  currency: 'USD',\n  description: 'Business Account',\n  userId: 'client-2',\n  createdAt: '2024-01-02T00:00:00Z',\n  updatedAt: '2024-01-02T00:00:00Z',\n  user: mockUsers[1]\n}];\nconst mockTransactions = [{\n  id: 'txn-1',\n  transactionId: 'TXN1234567890',\n  type: 'deposit',\n  status: 'completed',\n  amount: 1000.00,\n  fee: 0.00,\n  balanceAfter: 5000.00,\n  description: 'Initial deposit',\n  reference: 'DEP001',\n  userId: 'client-1',\n  accountId: 'account-1',\n  createdAt: '2024-01-15T10:00:00Z',\n  user: mockUsers[0],\n  account: mockAccounts[0]\n}, {\n  id: 'txn-2',\n  transactionId: 'TXN1234567891',\n  type: 'withdrawal',\n  status: 'completed',\n  amount: 500.00,\n  fee: 2.50,\n  balanceAfter: 4500.00,\n  description: 'ATM withdrawal',\n  reference: 'ATM001',\n  userId: 'client-1',\n  accountId: 'account-1',\n  createdAt: '2024-01-20T14:30:00Z',\n  user: mockUsers[0],\n  account: mockAccounts[0]\n}, {\n  id: 'txn-3',\n  transactionId: 'TXN1234567892',\n  type: 'transfer',\n  status: 'completed',\n  amount: 200.00,\n  fee: 1.00,\n  balanceAfter: 2300.00,\n  description: 'Transfer to savings',\n  reference: 'TRF001',\n  userId: 'client-1',\n  accountId: 'account-2',\n  createdAt: '2024-01-25T09:15:00Z',\n  user: mockUsers[0],\n  account: mockAccounts[1]\n}];\nexport const adminService = {\n  // User management\n  async getUsers(filters) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        let users = mockUsers;\n        if (filters !== null && filters !== void 0 && filters.status) {\n          users = users.filter(u => u.status === filters.status);\n        }\n        if (filters !== null && filters !== void 0 && filters.search) {\n          const searchLower = filters.search.toLowerCase();\n          users = users.filter(u => u.firstName.toLowerCase().includes(searchLower) || u.lastName.toLowerCase().includes(searchLower) || u.email.toLowerCase().includes(searchLower));\n        }\n        const result = {\n          users: users,\n          total: users.length,\n          page: 1,\n          limit: 50\n        };\n        resolve(result);\n      }, 100);\n    });\n  },\n  async getUserById(userId) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const user = mockUsers.find(u => u.id === userId);\n        if (user) {\n          resolve(user);\n        } else {\n          resolve(null);\n        }\n      }, 100);\n    });\n  },\n  async createUser(userData) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const newUser = {\n          id: `user-${Date.now()}`,\n          ...userData,\n          role: 'client',\n          status: 'active',\n          isEmailVerified: false,\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString()\n        };\n        mockUsers.push(newUser);\n        resolve(newUser);\n      }, 100);\n    });\n  },\n  async updateUser(userId, userData) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const userIndex = mockUsers.findIndex(u => u.id === userId);\n        if (userIndex !== -1) {\n          mockUsers[userIndex] = {\n            ...mockUsers[userIndex],\n            ...userData,\n            updatedAt: new Date().toISOString()\n          };\n          resolve(mockUsers[userIndex]);\n        } else {\n          resolve(null);\n        }\n      }, 100);\n    });\n  },\n  async updateUserStatus(userId, status) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const userIndex = mockUsers.findIndex(u => u.id === userId);\n        if (userIndex !== -1) {\n          mockUsers[userIndex].status = status;\n          mockUsers[userIndex].updatedAt = new Date().toISOString();\n          const {\n            password,\n            ...userWithoutPassword\n          } = mockUsers[userIndex];\n          resolve(userWithoutPassword);\n        } else {\n          resolve(null);\n        }\n      }, 100);\n    });\n  },\n  async deleteUser(userId) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const userIndex = mockUsers.findIndex(u => u.id === userId);\n        if (userIndex !== -1) {\n          mockUsers.splice(userIndex, 1);\n          resolve({\n            message: 'User deleted successfully'\n          });\n        } else {\n          resolve(null);\n        }\n      }, 100);\n    });\n  },\n  // Account management\n  async getAccounts(filters) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        let accounts = mockAccounts;\n        if (filters !== null && filters !== void 0 && filters.status) {\n          accounts = accounts.filter(a => a.status === filters.status);\n        }\n        if (filters !== null && filters !== void 0 && filters.type) {\n          accounts = accounts.filter(a => a.type === filters.type);\n        }\n        const result = {\n          accounts,\n          total: accounts.length,\n          page: 1,\n          limit: 50\n        };\n        resolve(result);\n      }, 100);\n    });\n  },\n  // Transaction management\n  async getTransactions(filters) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        let transactions = mockTransactions;\n        if (filters !== null && filters !== void 0 && filters.type) {\n          transactions = transactions.filter(t => t.type === filters.type);\n        }\n        if (filters !== null && filters !== void 0 && filters.status) {\n          transactions = transactions.filter(t => t.status === filters.status);\n        }\n        const result = {\n          transactions,\n          total: transactions.length,\n          page: 1,\n          limit: 50\n        };\n        resolve(result);\n      }, 100);\n    });\n  },\n  // Analytics\n  async getDashboardStats() {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const stats = {\n          users: {\n            total: mockUsers.length,\n            active: mockUsers.filter(u => u.status === 'active').length,\n            newThisMonth: 1,\n            growthRate: 10.0\n          },\n          accounts: {\n            total: mockAccounts.length,\n            active: mockAccounts.filter(a => a.status === 'active').length,\n            totalBalance: mockAccounts.reduce((sum, a) => sum + a.balance, 0)\n          },\n          transactions: {\n            total: mockTransactions.length,\n            thisMonth: 2,\n            totalVolume: mockTransactions.reduce((sum, t) => sum + t.amount, 0),\n            monthlyVolume: 1700.00\n          }\n        };\n        resolve(stats);\n      }, 100);\n    });\n  },\n  async getAnalytics() {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const totalBalance = mockAccounts.reduce((sum, a) => sum + a.balance, 0);\n        const monthlyVolume = mockTransactions.reduce((sum, t) => sum + t.amount, 0);\n        const analytics = {\n          overview: {\n            totalUsers: mockUsers.length,\n            activeUsers: mockUsers.filter(u => u.status === 'active').length,\n            totalAccounts: mockAccounts.length,\n            totalBalance: totalBalance,\n            monthlyTransactions: mockTransactions.length,\n            monthlyVolume: monthlyVolume\n          },\n          userGrowth: {\n            thisMonth: 1,\n            lastMonth: 1,\n            growthRate: 0.0\n          },\n          transactionTrends: {\n            daily: [{\n              date: '2024-01-15',\n              count: 1,\n              volume: 1000.00\n            }, {\n              date: '2024-01-20',\n              count: 1,\n              volume: 500.00\n            }, {\n              date: '2024-01-25',\n              count: 1,\n              volume: 200.00\n            }, {\n              date: '2024-01-26',\n              count: 0,\n              volume: 0.00\n            }, {\n              date: '2024-01-27',\n              count: 0,\n              volume: 0.00\n            }, {\n              date: '2024-01-28',\n              count: 0,\n              volume: 0.00\n            }, {\n              date: '2024-01-29',\n              count: 0,\n              volume: 0.00\n            }],\n            weekly: [{\n              week: 'Week 1',\n              count: 1,\n              volume: 1000.00\n            }, {\n              week: 'Week 2',\n              count: 1,\n              volume: 500.00\n            }, {\n              week: 'Week 3',\n              count: 1,\n              volume: 200.00\n            }, {\n              week: 'Week 4',\n              count: 0,\n              volume: 0.00\n            }]\n          },\n          topUsers: mockUsers.map(user => {\n            const userAccounts = mockAccounts.filter(a => a.userId === user.id);\n            const userBalance = userAccounts.reduce((sum, a) => sum + a.balance, 0);\n            const userTransactions = mockTransactions.filter(t => t.userId === user.id);\n            return {\n              id: user.id,\n              name: `${user.firstName} ${user.lastName}`,\n              email: user.email,\n              totalBalance: userBalance,\n              transactionCount: userTransactions.length\n            };\n          }).sort((a, b) => b.totalBalance - a.totalBalance)\n        };\n        resolve(analytics);\n      }, 100);\n    });\n  },\n  async getAllUsers() {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const users = mockUsers.map(u => {\n          const {\n            password,\n            ...userWithoutPassword\n          } = u;\n          return userWithoutPassword;\n        });\n        resolve(users);\n      }, 100);\n    });\n  }\n};","map":{"version":3,"names":["mockUsers","id","email","firstName","lastName","phoneNumber","address","dateOfBirth","nationalId","role","status","isEmailVerified","createdAt","updatedAt","mockAccounts","accountNumber","type","balance","availableBalance","interestRate","currency","description","userId","user","mockTransactions","transactionId","amount","fee","balanceAfter","reference","accountId","account","adminService","getUsers","filters","Promise","resolve","setTimeout","users","filter","u","search","searchLower","toLowerCase","includes","result","total","length","page","limit","getUserById","find","createUser","userData","newUser","Date","now","toISOString","push","updateUser","userIndex","findIndex","updateUserStatus","password","userWithoutPassword","deleteUser","splice","message","getAccounts","accounts","a","getTransactions","transactions","t","getDashboardStats","stats","active","newThisMonth","growthRate","totalBalance","reduce","sum","thisMonth","totalVolume","monthlyVolume","getAnalytics","analytics","overview","totalUsers","activeUsers","totalAccounts","monthlyTransactions","userGrowth","lastMonth","transactionTrends","daily","date","count","volume","weekly","week","topUsers","map","userAccounts","userBalance","userTransactions","name","transactionCount","sort","b","getAllUsers"],"sources":["C:/Users/khali/OneDrive/Bureau/bna/frontend/src/services/adminService.ts"],"sourcesContent":["// Mock data for admin service\r\nconst mockUsers = [\r\n  {\r\n    id: 'client-1',\r\n    email: 'ahmed.hassan@email.com',\r\n    firstName: 'Ahmed',\r\n    lastName: 'Hassan',\r\n    phoneNumber: '+1234567891',\r\n    address: '123 Main St, Casablanca, Morocco',\r\n    dateOfBirth: '1990-01-15',\r\n    nationalId: 'CLIENT001',\r\n    role: 'client',\r\n    status: 'active',\r\n    isEmailVerified: true,\r\n    createdAt: '2024-01-01T00:00:00Z',\r\n    updatedAt: '2024-01-01T00:00:00Z',\r\n  },\r\n  {\r\n    id: 'client-2',\r\n    email: 'samar.ali@email.com',\r\n    firstName: 'Samar',\r\n    lastName: 'Ali',\r\n    phoneNumber: '+1234567892',\r\n    address: '456 Oak Ave, Rabat, Morocco',\r\n    dateOfBirth: '1985-05-20',\r\n    nationalId: 'CLIENT002',\r\n    role: 'client',\r\n    status: 'active',\r\n    isEmailVerified: true,\r\n    createdAt: '2024-01-02T00:00:00Z',\r\n    updatedAt: '2024-01-02T00:00:00Z',\r\n  },\r\n];\r\n\r\nconst mockAccounts = [\r\n  {\r\n    id: 'account-1',\r\n    accountNumber: 'BNA1234567890',\r\n    type: 'savings',\r\n    status: 'active',\r\n    balance: 5000.00,\r\n    availableBalance: 5000.00,\r\n    interestRate: 2.5,\r\n    currency: 'USD',\r\n    description: 'Primary Savings Account',\r\n    userId: 'client-1',\r\n    createdAt: '2024-01-01T00:00:00Z',\r\n    updatedAt: '2024-01-01T00:00:00Z',\r\n    user: mockUsers[0],\r\n  },\r\n  {\r\n    id: 'account-2',\r\n    accountNumber: 'BNA1234567891',\r\n    type: 'checking',\r\n    status: 'active',\r\n    balance: 2500.00,\r\n    availableBalance: 2500.00,\r\n    interestRate: 0.5,\r\n    currency: 'USD',\r\n    description: 'Checking Account',\r\n    userId: 'client-1',\r\n    createdAt: '2024-01-01T00:00:00Z',\r\n    updatedAt: '2024-01-01T00:00:00Z',\r\n    user: mockUsers[0],\r\n  },\r\n  {\r\n    id: 'account-3',\r\n    accountNumber: 'BNA1234567892',\r\n    type: 'business',\r\n    status: 'active',\r\n    balance: 15000.00,\r\n    availableBalance: 15000.00,\r\n    interestRate: 1.5,\r\n    currency: 'USD',\r\n    description: 'Business Account',\r\n    userId: 'client-2',\r\n    createdAt: '2024-01-02T00:00:00Z',\r\n    updatedAt: '2024-01-02T00:00:00Z',\r\n    user: mockUsers[1],\r\n  },\r\n];\r\n\r\nconst mockTransactions = [\r\n  {\r\n    id: 'txn-1',\r\n    transactionId: 'TXN1234567890',\r\n    type: 'deposit',\r\n    status: 'completed',\r\n    amount: 1000.00,\r\n    fee: 0.00,\r\n    balanceAfter: 5000.00,\r\n    description: 'Initial deposit',\r\n    reference: 'DEP001',\r\n    userId: 'client-1',\r\n    accountId: 'account-1',\r\n    createdAt: '2024-01-15T10:00:00Z',\r\n    user: mockUsers[0],\r\n    account: mockAccounts[0],\r\n  },\r\n  {\r\n    id: 'txn-2',\r\n    transactionId: 'TXN1234567891',\r\n    type: 'withdrawal',\r\n    status: 'completed',\r\n    amount: 500.00,\r\n    fee: 2.50,\r\n    balanceAfter: 4500.00,\r\n    description: 'ATM withdrawal',\r\n    reference: 'ATM001',\r\n    userId: 'client-1',\r\n    accountId: 'account-1',\r\n    createdAt: '2024-01-20T14:30:00Z',\r\n    user: mockUsers[0],\r\n    account: mockAccounts[0],\r\n  },\r\n  {\r\n    id: 'txn-3',\r\n    transactionId: 'TXN1234567892',\r\n    type: 'transfer',\r\n    status: 'completed',\r\n    amount: 200.00,\r\n    fee: 1.00,\r\n    balanceAfter: 2300.00,\r\n    description: 'Transfer to savings',\r\n    reference: 'TRF001',\r\n    userId: 'client-1',\r\n    accountId: 'account-2',\r\n    createdAt: '2024-01-25T09:15:00Z',\r\n    user: mockUsers[0],\r\n    account: mockAccounts[1],\r\n  },\r\n];\r\n\r\nexport const adminService = {\r\n  // User management\r\n  async getUsers(filters?: any) {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        let users = mockUsers;\r\n        if (filters?.status) {\r\n          users = users.filter(u => u.status === filters.status);\r\n        }\r\n        if (filters?.search) {\r\n          const searchLower = filters.search.toLowerCase();\r\n          users = users.filter(u => \r\n            u.firstName.toLowerCase().includes(searchLower) ||\r\n            u.lastName.toLowerCase().includes(searchLower) ||\r\n            u.email.toLowerCase().includes(searchLower)\r\n          );\r\n        }\r\n        \r\n        const result = {\r\n          users: users,\r\n          total: users.length,\r\n          page: 1,\r\n          limit: 50,\r\n        };\r\n        resolve(result);\r\n      }, 100);\r\n    });\r\n  },\r\n\r\n  async getUserById(userId: string) {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        const user = mockUsers.find(u => u.id === userId);\r\n        if (user) {\r\n          resolve(user);\r\n        } else {\r\n          resolve(null);\r\n        }\r\n      }, 100);\r\n    });\r\n  },\r\n\r\n  async createUser(userData: any) {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        const newUser = {\r\n          id: `user-${Date.now()}`,\r\n          ...userData,\r\n          role: 'client',\r\n          status: 'active',\r\n          isEmailVerified: false,\r\n          createdAt: new Date().toISOString(),\r\n          updatedAt: new Date().toISOString(),\r\n        };\r\n        mockUsers.push(newUser);\r\n        resolve(newUser);\r\n      }, 100);\r\n    });\r\n  },\r\n\r\n  async updateUser(userId: string, userData: any) {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        const userIndex = mockUsers.findIndex(u => u.id === userId);\r\n        if (userIndex !== -1) {\r\n          mockUsers[userIndex] = { ...mockUsers[userIndex], ...userData, updatedAt: new Date().toISOString() };\r\n          resolve(mockUsers[userIndex]);\r\n        } else {\r\n          resolve(null);\r\n        }\r\n      }, 100);\r\n    });\r\n  },\r\n\r\n  async updateUserStatus(userId: string, status: string) {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        const userIndex = mockUsers.findIndex(u => u.id === userId);\r\n        if (userIndex !== -1) {\r\n          mockUsers[userIndex].status = status;\r\n          mockUsers[userIndex].updatedAt = new Date().toISOString();\r\n          const { password, ...userWithoutPassword } = mockUsers[userIndex];\r\n          resolve(userWithoutPassword);\r\n        } else {\r\n          resolve(null);\r\n        }\r\n      }, 100);\r\n    });\r\n  },\r\n\r\n  async deleteUser(userId: string) {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        const userIndex = mockUsers.findIndex(u => u.id === userId);\r\n        if (userIndex !== -1) {\r\n          mockUsers.splice(userIndex, 1);\r\n          resolve({ message: 'User deleted successfully' });\r\n        } else {\r\n          resolve(null);\r\n        }\r\n      }, 100);\r\n    });\r\n  },\r\n\r\n  // Account management\r\n  async getAccounts(filters?: any) {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        let accounts = mockAccounts;\r\n        if (filters?.status) {\r\n          accounts = accounts.filter(a => a.status === filters.status);\r\n        }\r\n        if (filters?.type) {\r\n          accounts = accounts.filter(a => a.type === filters.type);\r\n        }\r\n        \r\n        const result = {\r\n          accounts,\r\n          total: accounts.length,\r\n          page: 1,\r\n          limit: 50,\r\n        };\r\n        resolve(result);\r\n      }, 100);\r\n    });\r\n  },\r\n\r\n  // Transaction management\r\n  async getTransactions(filters?: any) {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        let transactions = mockTransactions;\r\n        if (filters?.type) {\r\n          transactions = transactions.filter(t => t.type === filters.type);\r\n        }\r\n        if (filters?.status) {\r\n          transactions = transactions.filter(t => t.status === filters.status);\r\n        }\r\n        \r\n        const result = {\r\n          transactions,\r\n          total: transactions.length,\r\n          page: 1,\r\n          limit: 50,\r\n        };\r\n        resolve(result);\r\n      }, 100);\r\n    });\r\n  },\r\n\r\n  // Analytics\r\n  async getDashboardStats() {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        const stats = {\r\n          users: {\r\n            total: mockUsers.length,\r\n            active: mockUsers.filter(u => u.status === 'active').length,\r\n            newThisMonth: 1,\r\n            growthRate: 10.0,\r\n          },\r\n          accounts: {\r\n            total: mockAccounts.length,\r\n            active: mockAccounts.filter(a => a.status === 'active').length,\r\n            totalBalance: mockAccounts.reduce((sum, a) => sum + a.balance, 0),\r\n          },\r\n          transactions: {\r\n            total: mockTransactions.length,\r\n            thisMonth: 2,\r\n            totalVolume: mockTransactions.reduce((sum, t) => sum + t.amount, 0),\r\n            monthlyVolume: 1700.00,\r\n          },\r\n        };\r\n        resolve(stats);\r\n      }, 100);\r\n    });\r\n  },\r\n\r\n  async getAnalytics() {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        const totalBalance = mockAccounts.reduce((sum, a) => sum + a.balance, 0);\r\n        const monthlyVolume = mockTransactions.reduce((sum, t) => sum + t.amount, 0);\r\n        \r\n        const analytics = {\r\n          overview: {\r\n            totalUsers: mockUsers.length,\r\n            activeUsers: mockUsers.filter(u => u.status === 'active').length,\r\n            totalAccounts: mockAccounts.length,\r\n            totalBalance: totalBalance,\r\n            monthlyTransactions: mockTransactions.length,\r\n            monthlyVolume: monthlyVolume,\r\n          },\r\n          userGrowth: {\r\n            thisMonth: 1,\r\n            lastMonth: 1,\r\n            growthRate: 0.0,\r\n          },\r\n          transactionTrends: {\r\n            daily: [\r\n              { date: '2024-01-15', count: 1, volume: 1000.00 },\r\n              { date: '2024-01-20', count: 1, volume: 500.00 },\r\n              { date: '2024-01-25', count: 1, volume: 200.00 },\r\n              { date: '2024-01-26', count: 0, volume: 0.00 },\r\n              { date: '2024-01-27', count: 0, volume: 0.00 },\r\n              { date: '2024-01-28', count: 0, volume: 0.00 },\r\n              { date: '2024-01-29', count: 0, volume: 0.00 },\r\n            ],\r\n            weekly: [\r\n              { week: 'Week 1', count: 1, volume: 1000.00 },\r\n              { week: 'Week 2', count: 1, volume: 500.00 },\r\n              { week: 'Week 3', count: 1, volume: 200.00 },\r\n              { week: 'Week 4', count: 0, volume: 0.00 },\r\n            ],\r\n          },\r\n          topUsers: mockUsers.map(user => {\r\n            const userAccounts = mockAccounts.filter(a => a.userId === user.id);\r\n            const userBalance = userAccounts.reduce((sum, a) => sum + a.balance, 0);\r\n            const userTransactions = mockTransactions.filter(t => t.userId === user.id);\r\n            \r\n            return {\r\n              id: user.id,\r\n              name: `${user.firstName} ${user.lastName}`,\r\n              email: user.email,\r\n              totalBalance: userBalance,\r\n              transactionCount: userTransactions.length,\r\n            };\r\n          }).sort((a, b) => b.totalBalance - a.totalBalance),\r\n        };\r\n        \r\n        resolve(analytics);\r\n      }, 100);\r\n    });\r\n  },\r\n\r\n  async getAllUsers() {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        const users = mockUsers.map(u => {\r\n          const { password, ...userWithoutPassword } = u;\r\n          return userWithoutPassword;\r\n        });\r\n        resolve(users);\r\n      }, 100);\r\n    });\r\n  },\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}