{"ast":null,"code":"// Mock data for client service\nconst mockProfile = {\n  id: 'client-1',\n  email: 'samar.guesmi@email.com',\n  firstName: 'samar',\n  lastName: 'guesmi',\n  phoneNumber: '+1234567891',\n  address: 'manzel boutguiba , bizerte',\n  dateOfBirth: '1990-01-15',\n  nationalId: 'CLIENT001',\n  status: 'active',\n  createdAt: '2024-01-01T00:00:00Z',\n  updatedAt: '2024-01-01T00:00:00Z'\n};\nconst mockAccounts = [{\n  id: 'account-1',\n  accountNumber: 'BNA1234567890',\n  type: 'savings',\n  status: 'active',\n  balance: 5000.00,\n  availableBalance: 5000.00,\n  interestRate: 2.5,\n  currency: 'USD',\n  description: 'Primary Savings Account',\n  createdAt: '2024-01-01T00:00:00Z',\n  updatedAt: '2024-01-01T00:00:00Z'\n}, {\n  id: 'account-2',\n  accountNumber: 'BNA1234567891',\n  type: 'checking',\n  status: 'active',\n  balance: 2500.00,\n  availableBalance: 2500.00,\n  interestRate: 0.5,\n  currency: 'USD',\n  description: 'Checking Account',\n  createdAt: '2024-01-01T00:00:00Z',\n  updatedAt: '2024-01-01T00:00:00Z'\n}];\nconst mockTransactions = [{\n  id: 'txn-1',\n  transactionId: 'TXN1234567890',\n  type: 'deposit',\n  status: 'completed',\n  amount: 1000.00,\n  fee: 0.00,\n  balanceAfter: 5000.00,\n  description: 'Initial deposit',\n  reference: 'DEP001',\n  accountId: 'account-1',\n  createdAt: '2024-01-15T10:00:00Z'\n}, {\n  id: 'txn-2',\n  transactionId: 'TXN1234567891',\n  type: 'withdrawal',\n  status: 'completed',\n  amount: 500.00,\n  fee: 2.50,\n  balanceAfter: 4500.00,\n  description: 'ATM withdrawal',\n  reference: 'ATM001',\n  accountId: 'account-1',\n  createdAt: '2024-01-20T14:30:00Z'\n}, {\n  id: 'txn-3',\n  transactionId: 'TXN1234567892',\n  type: 'transfer',\n  status: 'completed',\n  amount: 200.00,\n  fee: 1.00,\n  balanceAfter: 2300.00,\n  description: 'Transfer to savings',\n  reference: 'TRF001',\n  accountId: 'account-2',\n  createdAt: '2024-01-25T09:15:00Z'\n}];\nexport const clientService = {\n  // Profile management\n  async getProfile() {\n    return new Promise(resolve => {\n      setTimeout(() => resolve(mockProfile), 100);\n    });\n  },\n  async updateProfile(userData) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const updatedProfile = {\n          ...mockProfile,\n          ...userData\n        };\n        resolve(updatedProfile);\n      }, 100);\n    });\n  },\n  // Account management\n  async getAccounts() {\n    return new Promise(resolve => {\n      setTimeout(() => resolve(mockAccounts), 100);\n    });\n  },\n  async getAccountById(accountId) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const account = mockAccounts.find(acc => acc.id === accountId);\n        resolve(account);\n      }, 100);\n    });\n  },\n  async createAccount(accountData) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const newAccount = {\n          id: `account-${Date.now()}`,\n          accountNumber: `BNA${Date.now()}`,\n          ...accountData,\n          status: 'active',\n          balance: 0,\n          availableBalance: 0,\n          currency: 'USD',\n          createdAt: new Date().toISOString(),\n          updatedAt: new Date().toISOString()\n        };\n        mockAccounts.push(newAccount);\n        resolve(newAccount);\n      }, 100);\n    });\n  },\n  async getAccountSummary() {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const summary = {\n          totalAccounts: mockAccounts.length,\n          totalBalance: mockAccounts.reduce((sum, acc) => sum + acc.balance, 0),\n          totalAvailableBalance: mockAccounts.reduce((sum, acc) => sum + acc.availableBalance, 0),\n          accounts: mockAccounts\n        };\n        resolve(summary);\n      }, 100);\n    });\n  },\n  // Transaction management\n  async getTransactions(filters) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        let transactions = mockTransactions;\n        if (filters !== null && filters !== void 0 && filters.accountId) {\n          transactions = transactions.filter(t => t.accountId === filters.accountId);\n        }\n        if (filters !== null && filters !== void 0 && filters.type) {\n          transactions = transactions.filter(t => t.type === filters.type);\n        }\n        resolve(transactions);\n      }, 100);\n    });\n  },\n  async getTransactionById(transactionId) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const transaction = mockTransactions.find(t => t.id === transactionId);\n        resolve(transaction);\n      }, 100);\n    });\n  },\n  async createTransaction(transactionData) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        const newTransaction = {\n          id: `txn-${Date.now()}`,\n          transactionId: `TXN${Date.now()}`,\n          ...transactionData,\n          status: 'completed',\n          createdAt: new Date().toISOString()\n        };\n        mockTransactions.unshift(newTransaction);\n        resolve(newTransaction);\n      }, 100);\n    });\n  },\n  async getTransactionSummary(accountId, period) {\n    return new Promise(resolve => {\n      setTimeout(() => {\n        let transactions = mockTransactions;\n        if (accountId) {\n          transactions = transactions.filter(t => t.accountId === accountId);\n        }\n        const summary = {\n          totalTransactions: transactions.length,\n          totalAmount: transactions.reduce((sum, t) => sum + t.amount, 0),\n          totalFees: transactions.reduce((sum, t) => sum + (t.fee || 0), 0),\n          deposits: transactions.filter(t => t.type === 'deposit').length,\n          withdrawals: transactions.filter(t => t.type === 'withdrawal').length,\n          transfers: transactions.filter(t => t.type === 'transfer').length,\n          completed: transactions.filter(t => t.status === 'completed').length,\n          pending: transactions.filter(t => t.status === 'pending').length,\n          failed: transactions.filter(t => t.status === 'failed').length\n        };\n        resolve(summary);\n      }, 100);\n    });\n  }\n};","map":{"version":3,"names":["mockProfile","id","email","firstName","lastName","phoneNumber","address","dateOfBirth","nationalId","status","createdAt","updatedAt","mockAccounts","accountNumber","type","balance","availableBalance","interestRate","currency","description","mockTransactions","transactionId","amount","fee","balanceAfter","reference","accountId","clientService","getProfile","Promise","resolve","setTimeout","updateProfile","userData","updatedProfile","getAccounts","getAccountById","account","find","acc","createAccount","accountData","newAccount","Date","now","toISOString","push","getAccountSummary","summary","totalAccounts","length","totalBalance","reduce","sum","totalAvailableBalance","accounts","getTransactions","filters","transactions","filter","t","getTransactionById","transaction","createTransaction","transactionData","newTransaction","unshift","getTransactionSummary","period","totalTransactions","totalAmount","totalFees","deposits","withdrawals","transfers","completed","pending","failed"],"sources":["C:/Users/khali/OneDrive/Bureau/bna/frontend/src/services/clientService.ts"],"sourcesContent":["// Mock data for client service\r\nconst mockProfile = {\r\n  id: 'client-1',\r\n  email: 'samar.guesmi@email.com',\r\n  firstName: 'samar',\r\n  lastName: 'guesmi',\r\n  phoneNumber: '+1234567891',\r\n  address: 'manzel boutguiba , bizerte',\r\n  dateOfBirth: '1990-01-15',\r\n  nationalId: 'CLIENT001',\r\n  status: 'active',\r\n  createdAt: '2024-01-01T00:00:00Z',\r\n  updatedAt: '2024-01-01T00:00:00Z',\r\n};\r\n\r\nconst mockAccounts = [\r\n  {\r\n    id: 'account-1',\r\n    accountNumber: 'BNA1234567890',\r\n    type: 'savings',\r\n    status: 'active',\r\n    balance: 5000.00,\r\n    availableBalance: 5000.00,\r\n    interestRate: 2.5,\r\n    currency: 'USD',\r\n    description: 'Primary Savings Account',\r\n    createdAt: '2024-01-01T00:00:00Z',\r\n    updatedAt: '2024-01-01T00:00:00Z',\r\n  },\r\n  {\r\n    id: 'account-2',\r\n    accountNumber: 'BNA1234567891',\r\n    type: 'checking',\r\n    status: 'active',\r\n    balance: 2500.00,\r\n    availableBalance: 2500.00,\r\n    interestRate: 0.5,\r\n    currency: 'USD',\r\n    description: 'Checking Account',\r\n    createdAt: '2024-01-01T00:00:00Z',\r\n    updatedAt: '2024-01-01T00:00:00Z',\r\n  },\r\n];\r\n\r\nconst mockTransactions = [\r\n  {\r\n    id: 'txn-1',\r\n    transactionId: 'TXN1234567890',\r\n    type: 'deposit',\r\n    status: 'completed',\r\n    amount: 1000.00,\r\n    fee: 0.00,\r\n    balanceAfter: 5000.00,\r\n    description: 'Initial deposit',\r\n    reference: 'DEP001',\r\n    accountId: 'account-1',\r\n    createdAt: '2024-01-15T10:00:00Z',\r\n  },\r\n  {\r\n    id: 'txn-2',\r\n    transactionId: 'TXN1234567891',\r\n    type: 'withdrawal',\r\n    status: 'completed',\r\n    amount: 500.00,\r\n    fee: 2.50,\r\n    balanceAfter: 4500.00,\r\n    description: 'ATM withdrawal',\r\n    reference: 'ATM001',\r\n    accountId: 'account-1',\r\n    createdAt: '2024-01-20T14:30:00Z',\r\n  },\r\n  {\r\n    id: 'txn-3',\r\n    transactionId: 'TXN1234567892',\r\n    type: 'transfer',\r\n    status: 'completed',\r\n    amount: 200.00,\r\n    fee: 1.00,\r\n    balanceAfter: 2300.00,\r\n    description: 'Transfer to savings',\r\n    reference: 'TRF001',\r\n    accountId: 'account-2',\r\n    createdAt: '2024-01-25T09:15:00Z',\r\n  },\r\n];\r\n\r\nexport const clientService = {\r\n  // Profile management\r\n  async getProfile() {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => resolve(mockProfile), 100);\r\n    });\r\n  },\r\n\r\n  async updateProfile(userData: any) {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        const updatedProfile = { ...mockProfile, ...userData };\r\n        resolve(updatedProfile);\r\n      }, 100);\r\n    });\r\n  },\r\n\r\n  // Account management\r\n  async getAccounts() {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => resolve(mockAccounts), 100);\r\n    });\r\n  },\r\n\r\n  async getAccountById(accountId: string) {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        const account = mockAccounts.find(acc => acc.id === accountId);\r\n        resolve(account);\r\n      }, 100);\r\n    });\r\n  },\r\n\r\n  async createAccount(accountData: any) {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        const newAccount = {\r\n          id: `account-${Date.now()}`,\r\n          accountNumber: `BNA${Date.now()}`,\r\n          ...accountData,\r\n          status: 'active',\r\n          balance: 0,\r\n          availableBalance: 0,\r\n          currency: 'USD',\r\n          createdAt: new Date().toISOString(),\r\n          updatedAt: new Date().toISOString(),\r\n        };\r\n        mockAccounts.push(newAccount);\r\n        resolve(newAccount);\r\n      }, 100);\r\n    });\r\n  },\r\n\r\n  async getAccountSummary() {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        const summary = {\r\n          totalAccounts: mockAccounts.length,\r\n          totalBalance: mockAccounts.reduce((sum, acc) => sum + acc.balance, 0),\r\n          totalAvailableBalance: mockAccounts.reduce((sum, acc) => sum + acc.availableBalance, 0),\r\n          accounts: mockAccounts,\r\n        };\r\n        resolve(summary);\r\n      }, 100);\r\n    });\r\n  },\r\n\r\n  // Transaction management\r\n  async getTransactions(filters?: any) {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        let transactions = mockTransactions;\r\n        if (filters?.accountId) {\r\n          transactions = transactions.filter(t => t.accountId === filters.accountId);\r\n        }\r\n        if (filters?.type) {\r\n          transactions = transactions.filter(t => t.type === filters.type);\r\n        }\r\n        resolve(transactions);\r\n      }, 100);\r\n    });\r\n  },\r\n\r\n  async getTransactionById(transactionId: string) {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        const transaction = mockTransactions.find(t => t.id === transactionId);\r\n        resolve(transaction);\r\n      }, 100);\r\n    });\r\n  },\r\n\r\n  async createTransaction(transactionData: any) {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        const newTransaction = {\r\n          id: `txn-${Date.now()}`,\r\n          transactionId: `TXN${Date.now()}`,\r\n          ...transactionData,\r\n          status: 'completed',\r\n          createdAt: new Date().toISOString(),\r\n        };\r\n        mockTransactions.unshift(newTransaction);\r\n        resolve(newTransaction);\r\n      }, 100);\r\n    });\r\n  },\r\n\r\n  async getTransactionSummary(accountId?: string, period?: string) {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        let transactions = mockTransactions;\r\n        if (accountId) {\r\n          transactions = transactions.filter(t => t.accountId === accountId);\r\n        }\r\n        \r\n        const summary = {\r\n          totalTransactions: transactions.length,\r\n          totalAmount: transactions.reduce((sum, t) => sum + t.amount, 0),\r\n          totalFees: transactions.reduce((sum, t) => sum + (t.fee || 0), 0),\r\n          deposits: transactions.filter(t => t.type === 'deposit').length,\r\n          withdrawals: transactions.filter(t => t.type === 'withdrawal').length,\r\n          transfers: transactions.filter(t => t.type === 'transfer').length,\r\n          completed: transactions.filter(t => t.status === 'completed').length,\r\n          pending: transactions.filter(t => t.status === 'pending').length,\r\n          failed: transactions.filter(t => t.status === 'failed').length,\r\n        };\r\n        resolve(summary);\r\n      }, 100);\r\n    });\r\n  },\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}