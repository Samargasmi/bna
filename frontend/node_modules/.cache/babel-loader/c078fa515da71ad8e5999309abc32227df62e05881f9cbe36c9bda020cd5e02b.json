{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\khali\\\\OneDrive\\\\Bureau\\\\bna\\\\frontend\\\\src\\\\contexts\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  // Mock user database\n  const mockUsers = {\n    'client@bna.com': {\n      id: 'client-1',\n      email: 'client@bna.com',\n      firstName: 'Mehdi',\n      lastName: 'Alami',\n      role: 'client',\n      status: 'active',\n      password: 'password123'\n    },\n    'admin@bna.com': {\n      id: 'admin-1',\n      email: 'admin@bna.com',\n      firstName: 'Oussama',\n      lastName: 'BNA',\n      role: 'admin',\n      status: 'active',\n      password: 'admin123'\n    }\n  };\n  const login = async (email, password) => {\n    console.log('AuthContext login called with:', {\n      email,\n      password\n    });\n    setLoading(true);\n\n    // Simulate API call delay\n    await new Promise(resolve => setTimeout(resolve, 1000));\n    const userData = mockUsers[email];\n    console.log('Found user data:', userData);\n    if (userData && userData.password === password) {\n      const {\n        password: _,\n        ...userWithoutPassword\n      } = userData;\n      console.log('Login successful, setting user:', userWithoutPassword);\n      setUser(userWithoutPassword);\n      setToken('mock-jwt-token');\n      localStorage.setItem('bna_token', 'mock-jwt-token');\n      localStorage.setItem('bna_user', JSON.stringify(userWithoutPassword));\n    } else {\n      console.log('Login failed - invalid credentials');\n      throw new Error('Invalid credentials');\n    }\n    setLoading(false);\n  };\n  const register = async userData => {\n    // Mock registration - always succeeds\n    console.log('Mock registration:', userData);\n  };\n  const logout = () => {\n    setUser(null);\n    setToken(null);\n    localStorage.removeItem('bna_token');\n    localStorage.removeItem('bna_user');\n  };\n\n  // Check for existing session on mount\n  React.useEffect(() => {\n    const savedToken = localStorage.getItem('bna_token');\n    const savedUser = localStorage.getItem('bna_user');\n    if (savedToken && savedUser) {\n      setToken(savedToken);\n      setUser(JSON.parse(savedUser));\n    }\n  }, []);\n  const isAuthenticated = !!user && !!token;\n  const isAdmin = (user === null || user === void 0 ? void 0 : user.role) === 'admin';\n  const value = {\n    user,\n    token,\n    login,\n    register,\n    logout,\n    loading,\n    isAuthenticated,\n    isAdmin\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"s1TZKtXJORljotJSeVucKwo/FvQ=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","AuthContext","undefined","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","token","setToken","loading","setLoading","mockUsers","id","email","firstName","lastName","role","status","password","login","console","log","Promise","resolve","setTimeout","userData","_","userWithoutPassword","localStorage","setItem","JSON","stringify","register","logout","removeItem","useEffect","savedToken","getItem","savedUser","parse","isAuthenticated","isAdmin","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/khali/OneDrive/Bureau/bna/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, ReactNode } from 'react';\r\n\r\ninterface User {\r\n  id: string;\r\n  email: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  role: 'client' | 'admin';\r\n  status: 'active' | 'inactive' | 'suspended';\r\n}\r\n\r\ninterface AuthContextType {\r\n  user: User | null;\r\n  token: string | null;\r\n  login: (email: string, password: string) => Promise<void>;\r\n  register: (userData: RegisterData) => Promise<void>;\r\n  logout: () => void;\r\n  loading: boolean;\r\n  isAuthenticated: boolean;\r\n  isAdmin: boolean;\r\n}\r\n\r\ninterface RegisterData {\r\n  email: string;\r\n  password: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  phoneNumber: string;\r\n  address?: string;\r\n  dateOfBirth?: string;\r\n  nationalId?: string;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface AuthProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [token, setToken] = useState<string | null>(null);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  // Mock user database\r\n  const mockUsers = {\r\n    'client@bna.com': {\r\n      id: 'client-1',\r\n      email: 'client@bna.com',\r\n      firstName: 'Mehdi',\r\n      lastName: 'Alami',\r\n      role: 'client',\r\n      status: 'active',\r\n      password: 'password123',\r\n    },\r\n    'admin@bna.com': {\r\n      id: 'admin-1',\r\n      email: 'admin@bna.com',\r\n      firstName: 'Oussama',\r\n      lastName: 'BNA',\r\n      role: 'admin',\r\n      status: 'active',\r\n      password: 'admin123',\r\n    },\r\n  };\r\n\r\n  const login = async (email: string, password: string) => {\r\n    console.log('AuthContext login called with:', { email, password });\r\n    setLoading(true);\r\n    \r\n    // Simulate API call delay\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n    \r\n    const userData = mockUsers[email as keyof typeof mockUsers];\r\n    console.log('Found user data:', userData);\r\n    \r\n    if (userData && userData.password === password) {\r\n      const { password: _, ...userWithoutPassword } = userData;\r\n      console.log('Login successful, setting user:', userWithoutPassword);\r\n      setUser(userWithoutPassword as User);\r\n      setToken('mock-jwt-token');\r\n      localStorage.setItem('bna_token', 'mock-jwt-token');\r\n      localStorage.setItem('bna_user', JSON.stringify(userWithoutPassword));\r\n    } else {\r\n      console.log('Login failed - invalid credentials');\r\n      throw new Error('Invalid credentials');\r\n    }\r\n    \r\n    setLoading(false);\r\n  };\r\n\r\n  const register = async (userData: RegisterData) => {\r\n    // Mock registration - always succeeds\r\n    console.log('Mock registration:', userData);\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n    setToken(null);\r\n    localStorage.removeItem('bna_token');\r\n    localStorage.removeItem('bna_user');\r\n  };\r\n\r\n  // Check for existing session on mount\r\n  React.useEffect(() => {\r\n    const savedToken = localStorage.getItem('bna_token');\r\n    const savedUser = localStorage.getItem('bna_user');\r\n    \r\n    if (savedToken && savedUser) {\r\n      setToken(savedToken);\r\n      setUser(JSON.parse(savedUser));\r\n    }\r\n  }, []);\r\n\r\n  const isAuthenticated = !!user && !!token;\r\n  const isAdmin = user?.role === 'admin';\r\n\r\n  const value: AuthContextType = {\r\n    user,\r\n    token,\r\n    login,\r\n    register,\r\n    logout,\r\n    loading,\r\n    isAuthenticated,\r\n    isAdmin,\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}